<link rel="stylesheet" href="/css/propostas.css">

<section class="workspace">

    <div class="conteudo">Carregando...</div>

</section>

{{!-- <script type="text/javascript" src="/socket.io/socket.io.js"></script> --}}

<script>
    const proposta = JSON.parse(`{{{meta}}}`);
    const items = proposta.metadata.budget.items;

    console.log(proposta)

    {{!-- const notifications = Notification.requestPermission(); --}}
    {{!-- const socket = io.connect(); --}}

    function addHistory(action){
        
        var data = new Date();
        if(data.getMonth() < 12){
            var mes = data.getMonth() + 1;
        }else{
            var mes = 1;
        }
        var hoje = data.getDate() + "/" + mes + "/" + data.getFullYear();
        var hora = data.getHours()  + ":" + data.getMinutes();

        if(!proposta.metadata.history){
            proposta.metadata.history = [];
        }

        var registro = {
            proposta_id: proposta.id,
            client: proposta.metadata.client,
            action: action,
            hora: hora,
            data: hoje
        }

        proposta.metadata.history.push(registro);

        axios.put(`/api/proposals/update/metadata`, {
            id: proposta.id,
            metadata: proposta.metadata
        }).then((sucess) => {
            // console.log('History: ' + sucess.status)
        }).catch((error) => {
            console.log(error)
        })
    }

    function aproveProposals() {

        $(`.botoes`).html(`Aguarde...`);
        
        if(proposta.metadata.biometria == 'yes' && !proposta.metadata.photoBiometry){
            captaBiometria();
            return;
        }

        {{!-- socket.emit("send_not_proposta_aceita", proposta, () => {
            console.log('mensagem enviada!');
        }); --}}

        saveProposals();

    }

    function saveProposals(){
        axios.put(`/api/proposals/update/status`, {
            id: proposta.id,
            status: 'approved',
        }).then((sucess) => {
            if (sucess.status == 200) {
                addHistory(`Aprovou a proposta.`);

                $(`.conteudo`).load(`/html/proposals/obrigado.html`);
                
                let metadata = {
                    proposals_id: proposta.id,
                    creator_id: proposta.creator_id,
                    organization_id: proposta.organization_id,
                }
                setAnalisys('proposals_acepted', metadata, proposta.metadata.pipe_id);

                checkPowerUps(proposta.metadata.pipe_id, proposta.card_id);

                if(proposta.metadata.payment != 'no'){
                    setPayment();
                }
                
            }
        }).catch((error) => {
            console.log(error)
        })
    }

    function captaBiometria(){
        
        $(`.camera`).remove();
        $(`.workspace`).append(`<div class="camera"></div>`);

        setTimeout(()=>{
            $(`.camera`).load(`/html/proposals/biometria.html`);
        },200)
    }

    async function setPayment(){

        console.log('Aguardando pagamento...')

        var valorTotal = proposta.value.replace('R$ ', '').replace('R$', '').replace(' ', '');

        var pedido = {
            id: proposta.id,
            category: 'proposals',
            client: proposta.metadata.client,
            valorTotal: parseFloat(valorTotal),
            items: items,
            organization_id: proposta.organization_id,
        }
        
        
        var res = await axios.post(`/api/gerar-link-pagamento`,{
            pedido:pedido
        })

        if(res.status == 200){
            addHistory(`Foi redirecionado para pagamento.`);
            setTimeout(()=>{
                location.href = res.data.init_point;
            },200)
        }

    }
    
    function rejectProposals() {
        $(`.botoes`).html(`Aguarde...`);
        axios.put(`/api/proposals/update/status`, {
            id: proposta.id,
            status: 'rejected',
        }).then((sucess) => {
            if (sucess.status == 200) {
                var botao = `<button id="rejeitado" style="color: var(--lRed)" class="prev"><i style="color: var(--lRed)" class="fi fi-rr-cross"></i> Rejeitado</button>`;
                $(`.conteudo .botoes`).html(botao)
                addHistory(`Rejeitou a proposta.`);
            }
        }).catch((error) => {
            console.log(error)
        })
    }

    function gerarPropostaGeral(){

        if(proposta.type != 'personal'){
            $(`.conteudo`).load(`/html/proposals/${proposta.type}.html`);

            addHistory(`Abriu o link`);
            return;
        }

        var conteudo = "";
        conteudo += `<h1>Olá ${proposta.metadata.client.split(' ')[0]}!</h1>`;
        conteudo += `<p>Segue orçamento para aprovação:</p>`;
        conteudo += `<table>`;
        conteudo += `<thead>`;
        conteudo += `<tr>`;
        conteudo += `<th>Qtd</th>`;
        conteudo += `<th>Descrição</th>`;
        conteudo += `<th>Valor Uni.</th>`;
        conteudo += `<th>Valor Total</th>`;
        conteudo += `</tr>`;
        conteudo += `</thead>`;

        conteudo += `<tbody>`;

        for (let i = 0; i < items.length; i++) {
            conteudo += `<tr>`;
            conteudo += `<td>${items[i].qtd}</td>`;
            conteudo += `<td>${items[i].description}</td>`;
            conteudo += `<td>R$ ${parseFloat(items[i].value).toFixed(2)}</td>`;
            conteudo += `<td>R$ ${parseFloat(items[i].totalValue).toFixed(2)}</td>`;
            conteudo += `</tr>`;
        }

        conteudo += `</tbody>`;

        conteudo += `</table>`;

        if (proposta.metadata.budget.percentDiscount != 0) {

            conteudo += `<div class="celula">`;
            conteudo += `<p>Total</p>`;
            conteudo += `<p>R$ ${proposta.metadata.budget.totalValue}</p>`;
            conteudo += `</div>`;
            conteudo += `<div class="celula">`;
            conteudo += `<p>Desconto (-${proposta.metadata.budget.percentDiscount}%)</p>`;
            conteudo += `<p>-R$ ${proposta.metadata.budget.discountValue}</p>`;
            conteudo += `</div>`;

        }

        conteudo += `<div class="celula">`;
        conteudo += `<p>Valor final</p>`;
        conteudo += `<p>R$ ${proposta.metadata.budget.finalValue}</p>`;
        conteudo += `</div>`;
        conteudo += `<br>`;
        conteudo += `<hr>`;

        conteudo += `<div class="obs"><b>Forma de pagamento:</b><br>${proposta.metadata.obs}<br><br><b>Validade: </b>${proposta.metadata.validity}</div>`;

        conteudo += `<section class="botoes">`;
        if (proposta.status == 'pending') {
            conteudo += `<button id="rejeitar" class="prev" onclick="rejectProposals()">Rejeitar</button>`;
            conteudo += `<button id="aprovar" class="next" onclick="aproveProposals()">Aprovar</button>`;
        } else if (proposta.status == 'rejected') {
            conteudo += `<button id="rejeitado" class="prev" style="color: var(--lRed)"><i style="color: var(--lRed)" class="fi fi-rr-cross"></i> Rejeitado</button>`;
        } else if (proposta.status == 'approved') {

            
            if(proposta.metadata.payment != 'no'){
                setPayment();
            }
            
            {{!-- socket.emit("send_not_proposta_aceita", proposta, () => {
                console.log('mensagem enviada!');
            }); --}}

            conteudo += `<button id="aprovado" class="prev" style="color: var(--verde)"><i style="color: var(--verde)" class="fi fi-rr-check"></i> Aprovado</button>`;
        }
        conteudo += `</section>`;

        setTimeout(() => {

            $(`.conteudo`).html(conteudo)

            addHistory(`Abriu o link`);

        }, 100)

    }

    {{!-- socket.emit("send_not_proposta_aceita", proposta, () => {
        console.log('mensagem enviada!');
    }); --}}

    gerarPropostaGeral();

    async function checkPowerUps(pipe_id, card){

        var getPipe = await axios.get(`/api/pipe/${pipe_id}`);

        if(getPipe.status != 200){
            alert('checkPowerUps informa: '+getPipe.data);
            return;
        }

        var pipe = getPipe.data;

        if (pipe.metadata.powerups) {

            var powers = pipe.metadata.powerups.filter(item => item.condition.id == "proposta_aceita");

            if (powers.length > 0) {

                for (power of powers) {
                    activePowerUp(card, power);
                }

            }

        } 
    }

</script>