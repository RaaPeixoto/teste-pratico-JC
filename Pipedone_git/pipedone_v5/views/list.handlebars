{{>header}}

<link rel="stylesheet" href="/css/list.css">

<script>
    const list = JSON.parse('{{{list}}}');

    console.log(list.metadata)
</script>

<header class="sub">
    <div class="listsBotoes">
        <button class="btmCircular" onclick="addLinha(list.metadata)">+ Novo</button>
        {{!-- <button class="menu" onclick=""><i class="fi fi-rr-chart-connected"></i> Integradores</button> --}}
        <input type="search" name="busca_in_pipe" id="busca_in_list" placeholder="Digite e tecle ENTER..."
            onkeyup="busca($(this), '.card')">
    </div>


    <div class="listsBotoes">
        <button class="menu" onclick="openExportDados('upload_lista_xls')"><i class="fi fi-rr-folder-upload"></i> Upar lista</button>
        <button class="menu" onclick="openExportDados('export_dados_lista')"><i class="fi fi-rr-arrow-square-down"></i> Baixar em CSV</button>
    </div>
</header>

<section class="conteudo">Carregando...</section>

<script>

    $('.menuInicial, .pipes_conectados').remove();

    $('#busca_in_list').keypress(async (e) => {

        var termo = $('#busca_in_list').val()

        if (e.keyCode == 13) {

            var busca = await axios.post(`/api/itens/buscar/1`, {
                termo: termo,
                list_id: list.id,
            });

            //console.log(busca.data)

            setLines(busca.data, 1);

        }

        if (termo == "") {
            setLinhasCriadas(1);
        }
    }).blur(() => {
        var termo = $('#busca_in_list').val()
        if (termo == "") {
            setLinhasCriadas(1);
        }
    })

    function addMask(type) {
        switch (type) {
            case 'phone':
                return `onkeypress='$(this).mask("(00) 0 0000-0000");' type="tel"`;
                break;
            case 'cpf':
                return `onkeypress='$(this).mask("000.000.000-00");' type="tel"`;
            case 'cnpj':
                return `onkeypress='$(this).mask("00.000.000/0000-00");' type="tel"`;
                break;            
            case 'data':
                return `onkeypress='$(this).mask("00/00/0000");' type="tel"`;
                break;
            case 'placa':
                return `onkeypress='$(this).mask("AAA-0A00");' type="text"`;
                break;
            default:
                return `type="text"`;
                break;
        }
    }

    function addLinha(meta) {

        var list_id = list.id;

        var linha = {
            list_id: list_id,
            lines: []
        }

        var position = 1;

        for (campo of meta) {

            var item = {
                campo_id: campo.id,
                value: "",
                type: campo.type,
                position: position,
            };

            linha.lines.push(item);

            position++;

        }

        axios.post(`/api/item/criar`, {
            list: linha
        }).then((sucess) => {

            if (sucess.status != 200) {
                alert(sucess.data)
            }

            setLinhasCriadas(1)

        }).catch((error) => {
            console.log(error)
        })

    }

    async function setLines(dados, page) {

        const getList = dados.rows;
        const getPages = (parseFloat(dados.count)/30).toFixed(0);

        $('.conteudo table tbody').html('');
        $('.conteudo table tfooter').html('');
        var count = 0;

        for (let i = 0; i < getList.length; i++) {
            const item = getList[i];
            var n = count;
            var resto = n % 2;

            if (resto == 0) {
                var back = "var(--cinza)";
            } else {
                var back = "var(--branco)";
            }

            var tabela = "";
            tabela += `<tr id="line_${item.id}">`;
            tabela += `<td onclick="avisoDeleteLine(${item.id}, ${page})" style="background-color: ${back};text-align: center;cursor:pointer;"><i class="fi fi-rr-trash"></i></td>`;
            tabela += `<td style="background-color: ${back};text-align: center;">${item.id}</th>`;

            const metalist = item.metadata.sort((a, b) => {
                if (a.position > b.position) {
                    return 1;
                }
                if (a.position < b.position) {
                    return -1;
                }
                return 0;
            });

            for (campo of metalist) {
                var mask = await addMask(campo.type);
                
                if(campo.type != 'text'){
                    tabela += `<td style="background-color: ${back}">`;
                    tabela += `<input wrap="hard" value='${campo.value}' id="${campo.campo_id}" ${mask} class="noStyle"  onfocus="destaqueLinha('${campo.campo_id}')" onblur="removeDestaqueLinha('${campo.campo_id}');editCampoList(${campo.position},'${item.id}', '${campo.campo_id}')"/>`;
                    tabela += `</td>`;
                }else{
                    tabela += `<td id="${campo.campo_id}" ${mask} style="padding: 10px;width:auto;background-color: ${back}" onfocus="destaqueLinha('${campo.campo_id}')" onblur="removeDestaqueLinha('${campo.campo_id}');editCampo(${campo.position},'${item.id}', '${campo.campo_id}')" contentEditable="true">${campo.value}</td>`;
                }
                
            }

            var dataUpdate = new Date(item.updatedAt).toLocaleString();
            var dataCriacao = new Date(item.createdAt).toLocaleString();

            tabela += `<td style="background-color: ${back};padding:10px;">${dataUpdate}</td>`;
            tabela += `<td style="background-color: ${back};padding:10px;">${dataCriacao}</td>`;
            tabela += `<td style="background-color: ${back};padding:10px;"></td>`;

            tabela += "</tr>";

            $('.conteudo table tbody').prepend(tabela);

            count++;

        }

        var pagenation = "";
        for(let i = 0; i < getPages; i++){
            const pagina = i +1;
            
            if(pagina == page){
                var status = 'ativo';
            }else{
                var status = '';
            }
            pagenation += `<button class="pageNum ${status}" onclick="setLinhasCriadas(${pagina})">${pagina}</button>`;
        }

        $('.conteudo .numpaginas').html(pagenation);

    }

    function editCampoList(position, item_id, campo_id) {
        var value = $(`#line_${item_id} #${campo_id}`).val();
        axios.put(`/api/item`, {
            item_id: item_id,
            campo_id: campo_id,
            value: value,
            position: position,
        }).then((sucess) => {
            console.log(sucess.data)
        }).catch((error) => {
            alert(error)
        })
    }

    function destaqueLinha(line_id) {
        $(`#line_${line_id}`).css('box-shadow', 'var(--shadow)');
    }

    function removeDestaqueLinha(line_id) {
        $(`#line_${line_id}`).css('box-shadow', 'none');
    }

    function avisoDeleteLine(line_id, page) {
        $('body').append(`<div class="modal" id="modal_aviso"></div>`);
        $('#modal_aviso').siblings().css('filter', 'blur(4px)');

        var modal = "";

        modal += `<div id="aviso">`
        modal += `<div class="aviso">`
        modal += `<h1>Tem certeza que deseja EXCLUIR a linha "${line_id}"?</h1>`
        modal += `<p>Esta ação NÃO poderá ser desfeita!</p>`
        modal += `</div>`
        modal += `<div class="botoes">`
        modal += `<button id="prosseguir">Cancelar</button>`
        modal += `<button id="fechar_aviso" onclick="deleteLine('${line_id}',${page})">Excluir agora</button>`
        modal += `</div>`
        modal += `</div>`

        $('#modal_aviso').append(modal);

        $(`#prosseguir`).on(`click`, () => {
            $('#modal_aviso').siblings().css('filter', 'none');
            $('#modal_aviso').remove();
        })
    }

    function deleteLine(line_id, page) {
        axios.put(`/api/itens/delete`, {
            iten_id: line_id
        }).then((sucess) => {
            if (sucess.status != 200) {
                alert(sucess.data)
                return;
            }
            $(`#line_${line_id}`).remove()
            $('#modal_aviso').siblings().css('filter', 'none');
            $('#modal_aviso').remove();

            setLinhasCriadas(page);
        }).catch((error) => {
            alert(error)
        })
    }

    async function setTabela(list_id) {

        var listGet = await axios.get(`/api/list/${list_id}`);
        var listL = listGet.data;

        var header = "";
        header += `<div class="headPipe">`;
        header += `<input onblur="editTitleList(${listL.id})" id="titlePipe" value="${listL.title}" />`;
        header += `</div>`;
        $('.logotop').append(header);
        $('title').text(`${listL.title} - Pipedone`);

        var tabela = "<table>";
        tabela += "<thead>";

        tabela += "<tr>";
        tabela += `<th style="text-align: center;"><i class="fi fi-rr-trash"></i></th>`;
        tabela += `<th style="text-align: center;">Id</th>`;
        for (campo of listL.metadata) {
            tabela += `<th class="headTable"><span>${campo.campo}</span><i onclick="avisoDeleteColuna('${campo.campo}','${campo.id}', ${listL.id})" class="fi fi-rr-trash excluir"></i></th>`;
        }
        tabela += `<th class="headTable"><span>Última atualização</span></th>`;
        tabela += `<th class="headTable"><span>Data de criação</span></th>`;
        tabela += `<th onclick="addNewColum(${listL.id})" style="text-align: center; cursor: pointer; font-size: 16px"><i class="fi fi-rr-add"></i></th>`;
        tabela += "</tr>";
        tabela += "</thead>";

        tabela += "<tbody></tbody>";
        tabela += "</table>";
        tabela += "<div class='numpaginas'></div>";

        $('.conteudo').html(tabela);

        $(`#titlePipe`).keypress((e) => {
            if (e.keyCode == 13) {
                editTitleList();

                $(`#titlePipe`).blur();
            }
        })

    }

    async function deleteColuna(colum_id, list_id) {

        $('#modal_aviso').html(`Iniciando adição...`);

        var listGet = await axios.get(`/api/list/${list.id}`);
        var listL = listGet.data;

        var id = list_id;
        var novaMeta = listL.metadata.filter(item => item.id != colum_id);

        $('#aviso').html(`Criando coluna...`);

        axios.put(`/api/list/metadata`, {
            id: id,
            metadata: novaMeta
        }).then(async(sucess) => {

            if (sucess.status != 200) {
                console.error("Linha 52: " + sucess.data);
                return;
            }

            $('#modal_aviso').html(`Alterando coluna nos registros existentes...`);

            var alterandoColunas = await updateLinesAfterDelete(colum_id,list_id);

            if (alterandoColunas != 200) {
                console.error("Linha 60");
                return;
            }
            setTimeout(()=>{
                location.reload();
            },50)

        }).catch((error) => {
            console.error(error);
        })
    }

    async function updateLinesAfterDelete(colum_id, list_id) {

        var itens = await axios.get(`/api/item/list/${list_id}`);

        //console.log(itens)

        if(itens.data.length > 0){
            for (registro of itens.data) {

                var newMetadata = registro.metadata.filter(item => item.campo_id != colum_id);

                var alterar = await axios.put(`/api/item/metadata`, {
                    metadata: newMetadata,
                    id: registro.id
                })

                if (alterar.status == 200) {
                    $('#modal_aviso').html(`Linha ${registro.id} alterada.`);
                    //console.log(`Linha ${registro.id} alterada.`);
                } else {
                    $('#modal_aviso').html(`Erro na Linha ${registro.id}.`);
                    console.error(`Erro na Linha ${registro.id}.`);
                }

            }
        }
        return 200;

    }

    function avisoDeleteColuna(name, colum_id, list_id) {

        $('body').append(`<div class="modal" id="modal_aviso"></div>`);
        $('#modal_aviso').siblings().css('filter', 'blur(4px)');

        var modal = "";

        modal += `<div id="aviso">`
        modal += `<div class="aviso">`
        modal += `<h1>Tem certeza que deseja DELETAR a coluna ${name}?</h1>`
        modal += `<p>Isso irá afetar <strong>TODOS</strong> os cards e linhas que estejam ligados a essa lista!</p>`
        modal += `</div>`
        modal += `<div class="botoes">`
        modal += `<button id="prosseguir">Cancelar</button>`
        modal += `<button id="fechar_aviso" style="background-color: red;" onclick="deleteColuna('${colum_id}', '${list_id}')">DELETAR</button>`
        modal += `</div>`
        modal += `</div>`

        $('#modal_aviso').append(modal);

        $(`#prosseguir`).on(`click`, () => {
            $('#modal_aviso').siblings().css('filter', 'none');
            $('#modal_aviso').remove();
        })

    }

    function addNewColum() {

        $('body').append(`<div class="modal" id="nova_coluna"></div>`);
        $('#nova_coluna').siblings().css('filter', 'blur(4px)');
        $('#nova_coluna').load('/html/nova_coluna.html');

    }

    function closeNewColum() {

        $('#nova_coluna').siblings().css('filter', 'none');
        $('#nova_coluna').remove();

    }

    function editTitleList(list_id) {
        var title = $(`#titlePipe`).val();

        axios.put(`/api/list/title`, {
            title: title,
            list_id: list_id,
        }).then((sucess) => {
            if (sucess.status != 200) {
                sucess(sucess.data)
            }
        }).catch((error) => {
            alert(error)
        })
    }

    function setLinhasCriadas(page) {
        axios.get(`/api/itens/${list.id}/${page}`).then((getList) => {
            //console.log(getList)
            if (getList.status == 200) {
                setLines(getList.data, page);
            }
        }).catch((error) => {
            alert("listError: " + error)
        })
    }

    function openExportDados(arquivo){
        $('body').append('<div class="modal" id="exportDados"></div>');
        $('#exportDados').load(`/html/${arquivo}.html`);
        $('#exportDados').siblings().css('filter', 'blur(4px)');
    }

    function closeExportDados(){
        $('#exportDados').siblings().css('filter', 'none');
        $('#exportDados').remove();
    }

    setTabela(list.id);
    setLinhasCriadas(1);

</script>