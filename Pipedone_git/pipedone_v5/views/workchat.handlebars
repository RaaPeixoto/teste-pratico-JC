<script src="/lib/jspdf/pdf.js"></script>
<script src="/lib/jspdf/pdf.sandbox.js"></script>
<script src="/lib/js_pdf/jspdf.js"></script>
<script src="/lib/html2canvas.js"></script>
<script src="/lib/jspdf/pdf.worker.js"></script>
{{>header}}

<link rel="stylesheet" href="/css/workchat.css">

<section class="geral">
    {{!-- <div class="header">
        <input type="search" placeholder="Pesquisar mensagem..." id="pesquisar">
    </div> --}}

    <div class="body">
        <div class="menuchat">

            {{!-- down --}}
            <h4 onclick="openDrop('pessoas')" id="pessoas"><i class="fi fi-rr-caret-down"></i> Pessoas</h4>
            <div class="pessoas"></div>

            {{!--
            <hr> --}}

            {{!-- down --}}
            {{!-- <h4 onclick="openDrop('grupos')" id="grupos"><i class="fi fi-rr-caret-down"></i> Grupos</h4>
            <div class="grupos"></div>
            <button class="new"><i class="fi fi-rr-add"></i> Criar grupo</button> --}}

        </div>
        <div class="conversa oculto">
            <div class="textos">
                <div class="perfil">
                    <div class="container">
                        <h4>Usuário</h4>
                    </div>
                </div>
                <div class="batepapo"></div>
            </div>
            <div class="teclado">
                <div class="box text">
                    <input id="texty" type="text" placeholder="Digite e tecle enter para enviar...." class="texty" />
                    <input id="member_id" type="hidden" />
                    <div class="icones">
                        <input type="file" style="display: none;" id="file">

                        <audio src=""></audio>
                        <label for="file" class="iconeTeclado" id="arquivo"><i class="fi fi-rr-clip"></i></label>
                        <label for="file" class="iconeTeclado" id="picture"><i class="fi fi-rr-picture"></i></label>
                        {{!-- <label for="" class="iconeTeclado" onclick="start()" id="start">Start</label>
                        <label for="" class="iconeTeclado" onclick="stop()" id="stop">Stop</label>
                        <label for="" class="iconeTeclado" id="microfone"><i class="fi fi-rr-microphone"></i></label> --}}
                    </div>
                    <button class="enviarButton" onclick="sendMsgInd();"><i class="fi fi-rr-paper-plane"></i></button>
                </div>
            </div>
        </div>

        <div class="setFile">
            <i onclick="closeSetFile();" class="fi fechar fi-rr-cross"></i>
            <h4 id="tituloDoc"></h4>
            <div class="preview" id="preview"></div>
            <input id="textyDoc" type="text" placeholder="Digite uma mensagem...." class="texty" />
            <input id="item_id" type="hidden" />
            <hr>
            <div class="carroussel">
                <label for="file" class="iconeAdd"><i class="fi fi-rr-add"></i></label>
            </div>
            <button class="enviarButtonDoc" onclick="enviarDoc()"><i class="fi fi-rr-paper-plane"></i></button>
        </div>

        <div class="standby"><i class="fi fi-rr-smiley-comment-alt"></i></div>
        <div class="subconversa oculto"></div>
    </div>

</section>


<script>

    var socket = io.connect();
    socket.on("refresh_status_users", (usuarios) => {
        verifyUsersOnline();
        console.log(usuarios);
    });    
    
    socket.on("refresh_message", async(msg) => {
        console.log("== msg ==");
        console.log(msg);

        if(usuario.id == msg.destiny){
            var chats = await getMensagensWorkChat(msg.sender);
            console.log("chats")
            console.log(chats)
            setMensagens(chats);
            playSound();
        }

    });

    $('.menu button').removeClass('ativo');
    $('#menu_workchat').addClass('ativo');
    $('title').text('WorkChat | Pipedone');

    $('#picture').click(() => {
        $('#file').attr('accept', "image/*");
    });

    async function verifyUsersOnline(){
        // 'usuario' é uma variável global;
        var getUsers = await axios.get(`/usuarios-online/${usuario.organization_id}`);
        console.log(getUsers.data);
        var usersOn = getUsers.data.filter(item => item.user_id != usuario.id);
        console.log('usersOn');
        console.log(usersOn);

        var divOnline = `<div class="circle green"></div>`;

        for(let user of usersOn){
            $(`#contact_${user.user_id}`).addClass('online');
        }
    } 
    verifyUsersOnline();

    async function startRecording() {
        const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
        const mediaRecorder = new MediaRecorder(stream);
        const audioChunks = [];

        mediaRecorder.addEventListener("dataavailable", (event) => {
            audioChunks.push(event.data);
        });

        const start = () => {
            mediaRecorder.start();
            console.log('Gravando...')
        };

        const stop = () => {
            return new Promise((resolve, reject) => {
                mediaRecorder.addEventListener("stop", () => {
                    const audioBlob = new Blob(audioChunks);
                    const audioUrl = URL.createObjectURL(audioBlob);
                    const audio = new Audio(audioUrl);
                    const play = () => {
                        audio.play();
                    };

                    resolve({ audioBlob, audioUrl, play });
                });
                console.log('Finalizado!')
                mediaRecorder.stop();
            });
        };

        return { start, stop };
    }

    $('#microfone').click(() => {
       startRecording();
    });

    $('#arquivo').click(() => {
        $('#file').removeAttr('accept');
        $('#file').removeAttr('capture=microphone');
    });

    function hasGetUserMedia() {
        return !!(navigator.getUserMedia || navigator.webkitGetUserMedia ||
            navigator.mozGetUserMedia || navigator.msGetUserMedia);
    }

    function closeSetFile() {

        $('.setFile').animate({
            bottom: '-100%'
        }, 200);

        $('.preview').html('');

        while (metachat.documents.length) {
            metachat.documents.pop();
        }

    }

    var metachat = {
        documents: []
    }

    $('#textyDoc').blur(() => {
        var id = $('#item_id').val();

        var ob = metachat.documents.find(item => item.id == id);

        ob.msg = $('#textyDoc').val();
    })

    $('#file').change(async () => {

        var documento = document.querySelector('#file');
        var arquivo = documento.files[0];
        var name = documento.files[0].name;
        var base = await getBase64(arquivo);

        var tamInKb = parseFloat(arquivo.size) / 1000;

        if (metachat.documents.length == 10) {
            error("Você só pode enviar 10 arquivos de cada vez!");
            return;
        }

        if (tamInKb > 64000) {
            error("Seu arquivo não pode ter mais que 88 megabytes.");
            return;
        }

        var ty = arquivo.type.split('/');
        var tipo = ty[0];
        var form = ty[1];

        if (form == 'json') {
            error("Arquivos JSON não são aceitos.");
            return;
        }

        var id = newId();

        var doc = {
            id: id,
            type: form,
            name: name,
            base: base,
            tam: tamInKb,
            msg: "",
        }

        metachat.documents.push(doc);

        setPreviewById(doc.id);

        renderCarroussel(metachat.documents);

        $('.setFile').animate({
            bottom: '0px'
        }, 200);

    });

    function renderCarroussel(obj) {

        $('.carroussel').html('');

        for (ob of obj) {

            switch (ob.type) {

                case 'pdf':
                    $('.carroussel').prepend(`<label onclick="setPreviewById('${ob.id}')" class="iconeAdd" id="${ob.id}"><i class="fi fi-rr-file"></i></label>`);

                    break;

                case 'png':
                    $('.carroussel').prepend(`<label onclick="setPreviewById('${ob.id}')" class="iconeAdd" id="${ob.id}" style="background-image:url(${ob.base})"></label>`);
                    break;

                case 'jpg':
                    $('.carroussel').prepend(`<label onclick="setPreviewById('${ob.id}')" class="iconeAdd" id="${ob.id}" style="background-image:url(${ob.base})"></label>`);
                    break;

                case 'jpeg':
                    $('.carroussel').prepend(`<label onclick="setPreviewById('${ob.id}')" class="iconeAdd" id="${ob.id}" style="background-image:url(${ob.base})"></label>`);
                    break;

                case 'webp':
                    $('.carroussel').prepend(`<label onclick="setPreviewById('${ob.id}')" class="iconeAdd" id="${ob.id}" style="background-image:url(${ob.base})"></label>`);
                    break;

                case 'svg':
                    $('.carroussel').prepend(`<label onclick="setPreviewById('${ob.id}')" class="iconeAdd" id="${ob.id}" style="background-image:url(${ob.base})"></label>`);
                    break;

                case 'gif':
                    $('.carroussel').prepend(`<label onclick="setPreviewById('${ob.id}')" class="iconeAdd" id="${ob.id}" style="background-image:url(${ob.base})"></label>`);
                    break;

                default:
                    $('.carroussel').prepend(`<label onclick="setPreviewById('${ob.id}')" class="iconeAdd" id="${ob.id}"><i class="fi fi-rr-file"></i></label>`);
                    break;

            }
        }

        $('.carroussel').append(`<label for="file" class="iconeAdd"><i class="fi fi-rr-add"></i></label>`);
    };

    function renderImagePreview(base) {
        $('#preview').css('background-image', `url(${base})`);
    };

    function deleteDocAnexo(id) {

        var obj = metachat.documents.filter(item => item.id != id);

        while (metachat.documents.length) {
            metachat.documents.pop();
        }

        for (ob of obj) {
            metachat.documents.push(ob);
        }

        if (metachat.documents.length > 0) {

            setPreviewById(metachat.documents[0].id);
            renderCarroussel(metachat.documents);

        } else {
            closeSetFile();
        };

        console.log(metachat);
    }

    function setPreviewById(id) {

        $('.preview').css('background-image', `url()`);
        $('.preview').html('');
        $('#item_id').val('');
        $('#tituloDoc').text('');
        $('.preview_pdf').remove();

        var ob = metachat.documents.find(item => item.id == id);

        $('#item_id').val(id);
        $('#tituloDoc').text(ob.name);
        $('#textyDoc').val(ob.msg);

        switch (ob.type) {

            case 'pdf':
                renderPdfInBase64(ob.base);
                break;

            case 'png':
                renderImagePreview(ob.base);
                break;

            case 'jpg':
                renderImagePreview(ob.base);
                break;

            case 'jpeg':
                renderImagePreview(ob.base);
                break;

            case 'webp':
                renderImagePreview(ob.base);
                break;

            case 'svg':
                renderImagePreview(ob.base);
                break;

            case 'gif':
                renderImagePreview(ob.base);
                break;

            default:
                $('#preview').html(`<i class="fi fi-rr-file"></i><br>Pré-visualização indisponível<br><span class="bytes">${ob.tam * 1000} B</span`);
                break;

        }

        $('#preview').append(`<i onclick="deleteDocAnexo('${id}');" class="fi fi-rr-trash"></i>`);

    };

    async function enviarDoc() {

        if (!metachat.documents || metachat.documents.length == 0) {
            return;
        }

        for (obj of metachat.documents) {
            var name = await uploadFileInBase(obj);

            var objeto = {
                msg: obj.msg,
                arquivo: name,
                name: obj.name,
                type: obj.type
            }

            sendMsgDoc(objeto);
        }
    }

    async function renderPdfInBase64(base64) {

        $(".preview").html('<p style="color: white" id="carregando">Carregando...</p>').fadeIn(200);

        var url = base64;
        // console.log(url);

        var loadingTask = pdfjsLib.getDocument(url);

        loadingTask.promise.then(async (pdf) => {

            var numPages = pdf._pdfInfo.numPages;

            for (let i = 1; i <= numPages; i++) {

                console.log("Page " + i);
                var page = await pdf.getPage(i);
                var scale = 1;

                var viewport = page.getViewport({
                    scale: scale,
                });

                //ID do elemento HTML onde vou imprimir a pagina

                var id = newId();

                var canvas = $("<canvas />", {
                    class: 'preview_pdf',
                    id: id,
                });

                $(".preview").append(canvas);

                var canvas = document.getElementById(id);

                var context = canvas.getContext('2d');

                canvas.height = viewport.height;
                canvas.width = viewport.width;

                var renderContext = {

                    canvasContext: context,

                    viewport: viewport

                };

                page.render(renderContext);


            }

            $(`#carregando`).remove();

        }).catch((erro) => {
            $(`#carregando`).remove();
            $(".preview").html('<p style="color: white" id="carregando">Erro ao subir arquivo.</p>');
            alert(erro)
        });
    }

    function getBase64(file) {

        return new Promise((resolve, reject) => {

            var reader = new FileReader();
            reader.readAsDataURL(file);
            reader.onload = function () {
                // // //console.log(reader.result);
                return resolve(reader.result);
            };
            reader.onerror = function (error) {
                // //console.log('Error: ', error);
                return reject('erro');
            };
        })
    }

    function openDrop(classe) {
        $(`.${classe}`).slideToggle(200);

        var classei = $(`#${classe} i`).prop('class');

        if (classei.includes('fi-rr-caret-down')) {
            $(`#${classe} i`).removeClass('fi-rr-caret-down').addClass('fi-rr-caret-right');
        }

        if (classei.includes('fi-rr-caret-right')) {
            $(`#${classe} i`).removeClass('fi-rr-caret-right').addClass('fi-rr-caret-down');
        }
    }

    async function setMembers() {
        var getMembers = await axios.get(`/api/users/listar`);
        var membersSujo = getMembers.data;
const params = new URLSearchParams(window.location.search);
const member_id = params.get('member_id');


        if (getMembers.status != 200) {
            error(membersSujo);
            return;
        }

        var members = membersSujo.filter(item => item.id !== usuario.id);
        $(`.listacontatos`).html('')
        for (var i = 0; i < members.length; i++) {


            const member = members[i];

            if (member.id != usuario.id) {
                console.log(`#contact_${member.id}`)

                var elementos = "";
                elementos += `<div class="contato" onclick="openChat(${member.id})" id="contact_${member.id}">`;
                //elementos += `<img src="/img/smile.svg">`;
                //elementos += `<span class="status off">Offline</span>`;
                elementos += `<div class="text">`;
                elementos += `<h6>${member.name}</h6>`;
                elementos += `</div>`;
                elementos += `</div>`;

                $(`.pessoas`).append(elementos);

            }

        }
if(member_id){
    openChat(member_id)
}
    }

    async function openChat(member_id) {
        $(`.contato`).css('background-color', 'transparent');
        $(`.contato#contact_${member_id}`).css('background-color', 'var(--lineblue)');

        var chats = await getMensagensWorkChat(member_id);

        setMensagens(chats);

        var getUser = await getUserById(member_id);

        $(`.perfil .container h4`).text(getUser.name);
        $(`#member_id`).val(member_id);

        $(`.conversa`).removeClass('oculto');
        $(`.standby`).addClass('oculto');
        updateWorkchatNotifications(member_id)
    }

    function montaArquivoMsg(arquivo) {
        var div = ``;
        if (arquivo.type == "png" || arquivo.type == "jpg" || arquivo.type == "jpeg" || arquivo.type == "svg" || arquivo.type == "webp" || arquivo.type == "gif") {
            div += `<a class="linkMsg" href="./anexos/${arquivo.doc}" target="_blank">`;
            div += `<img onclick="openImagem()" src="/anexos/${arquivo.doc}" title="${arquivo.name}" class="imagem">`;
            div += `</a>`;
        } else {
            div += `<a class="linkMsg" href="./anexos/${arquivo.doc}" target="_blank">`;
            div += `<div class="documento">`;
            div += `<i class="fi fi-rr-file"></i>`;
            div += `<div class="texto">`;
            div += `<h4>${arquivo.name}</h4>`;
            div += `<span>${arquivo.type}</span>`;
            div += `</div>`;
            div += `</div>`;
            div += `</a>`;
        }
        return div;
    }

    function setMensagens(mensagens) {
        //console.log(mensagens)
        var conteudo = "";
        for (msg of mensagens) {

            if (msg.sender == usuario.id) {
                var css = 'sender';
            } else {
                var css = 'recipient';
            }

            var data = pegarDataAtual(msg.createdAt);

            var texto = returnTextUrl(msg.message);

            conteudo += `<div class="msg">`;
            conteudo += `<div class="${css}">`;

            if (msg.metadata.arquivo) {
                conteudo += montaArquivoMsg(msg.metadata.arquivo);
            }

            //conteudo += `<i class="fi fi-rr-angle-small-down"></i>`;
            conteudo += `<p>${texto}</p>`;
            conteudo += `<span class="data">${data}</span>`;
            conteudo += `</div>`;
            conteudo += `</div>`;
        }
        $(`.batepapo`).html(conteudo);
    }

    function returnTextUrl(text) {
        var reURL = /((?:http(s)?:\/\/)?(?:www(\d)?\.)?([\w\-]+\.\w{2,})\/?((?:\?(?:[\w\-]+(?:=[\w\-]+)?)?(?:&[\w\-]+(?:=[\w\-]+)?)?))?(#(?:[^\s]+)?)?)/g;

        return text.replace(reURL, '<a target="_blank" href="http$2://www$3.$4$5$6">$1</a>');
    }

    function pegarDataAtual(data) {
        var dataAtual = new Date(data);
        var dia = (dataAtual.getDate() < 10 ? '0' : '') + dataAtual.getDate();
        var mes = ((dataAtual.getMonth() + 1) < 10 ? '0' : '') + (dataAtual.getMonth() + 1);
        var ano = dataAtual.getFullYear();
        var hora = (dataAtual.getHours() < 10 ? '0' : '') + dataAtual.getHours();
        var minuto = (dataAtual.getMinutes() < 10 ? '0' : '') + dataAtual.getMinutes();
        var segundo = (dataAtual.getSeconds() < 10 ? '0' : '') + dataAtual.getSeconds();

        var dataFormatada = dia + "/" + mes + "/" + ano + " " + hora + ":" + minuto + ":" + segundo;
        return dataFormatada;
    }

    $(`#texty`).keyup((e) => {
        if (e.keyCode == '13') {
            sendMsgInd();
        }
    })

    $(`#textyDoc`).keyup((e) => {

        if (e.keyCode == '13') {
            var id = $('#item_id').val();
            var ob = metachat.documents.find(item => item.id == id);

            ob.msg = $('#textyDoc').val();

            setTimeout(() => {
                enviarDoc();
            }, 200)
        }
    })

    function sendMsgInd() {

        if ($(`#texty`).val() == "" || $(`#member_id`).val() == "") {
            return;
        }

        var mensagem = {
            msg: $(`#texty`).val(),
            destiny: $(`#member_id`).val()
        }

        axios.post(`/api/chats/post`, {
            message: mensagem.msg,
            metadata: {},
            recipient: mensagem.destiny,
        }).then((sucess) => {
            if (sucess.status == 200) {

                var data = pegarDataAtual(sucess.data.createdAt);

                var msg = returnTextUrl(sucess.data.message);

                var conteudo = "";
                conteudo += `<div class="msg">`;
                conteudo += `<div class="sender">`;
                conteudo += `<i class="fi fi-rr-angle-small-down"></i>`;
                conteudo += `<p>${msg}</p>`;
                conteudo += `<span class="data">${data}</span>`;
                conteudo += `</div>`;
                conteudo += `</div>`;

                var batepapo = $(`.batepapo`);
                batepapo.prepend(conteudo).prop("scrollTop", batepapo.prop("scrollHeight"));

                $(`#texty`).val('');

                var msg = {
                    texto: msg,
                    sender: usuario.id,
                    destiny: mensagem.destiny,
                    organization_id: usuario.organization_id,
                    metadata: {},
                }
                createNotification('workchat', `${usuario.name} te enviou uma nova mensagem: "${msg.texto}"`,mensagem.destiny,usuario.id)
                 
                socket.emit("sendMensage", msg, () => {
                     console.log('mensagem enviada!');
                });


            }
        }).catch((error) => {
            console.log(error);
        })

    }

    function sendMsgDoc(obj) {

        if ($(`#member_id`).val() == "") {
            error('Destinatário não encontrado!')
            return;
        }

        var mensagem = {
            msg: obj.msg,
            destiny: $(`#member_id`).val()
        }

        var metachat = {
            arquivo: {
                doc: obj.arquivo,
                name: obj.name,
                type: obj.type,
            }
        }

        axios.post(`/api/chats/post`, {
            message: mensagem.msg,
            metadata: metachat,
            recipient: mensagem.destiny,
        }).then((sucess) => {
            if (sucess.status == 200) {

                closeSetFile();

                openChat(mensagem.destiny);

                var arquivo = montaArquivoMsg(metachat.arquivo);

                var data = pegarDataAtual(sucess.data.createdAt);

                var msg = returnTextUrl(sucess.data.message);

                var conteudo = "";
                conteudo += `<div class="msg">`;
                conteudo += `<div class="sender">`;
                conteudo += `<i class="fi fi-rr-angle-small-down"></i>`;
                conteudo += `${arquivo}`;
                conteudo += `<p>${msg}</p>`;
                conteudo += `<span class="data">${data}</span>`;
                conteudo += `</div>`;
                conteudo += `</div>`;

                var batepapo = $(`.batepapo`);
                batepapo.prepend(conteudo).prop("scrollTop", batepapo.prop("scrollHeight"));

                var msg = {
                    texto: msg,
                    sender: usuario.id,
                    organization_id: usuario.organization_id,
                    destiny: mensagem.destiny,
                    metadata: metachat,
                }
                createNotification('workchat', `${usuario.name} te enviou um documento`,mensagem.destiny,usuario.id)

                socket.emit("sendMensage", msg, () => {
                     console.log('mensagem enviada!');
                });

            }
        }).catch((error) => {
            console.log(error);
        })

    }

    async function uploadFileInBase(obj) {

        var base = obj.base;
        var formato = obj.type;
        var nomeArquivo = obj.id + '.' + formato;

        var nome = await axios.post(`/api/upload/form`, {
            name: nomeArquivo,
            base64: base,
        })

        if (nome.status == 200) {

            return nome.data;

        } else {
            alert(nome.data)
        }

    }

    setMembers();
</script>